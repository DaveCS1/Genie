// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Genie.Templates.Dapper
{
    using Genie.Base;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\Genie\Genie\Templates\Dapper\SqlMapperExtensions.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class SqlMapperExtensions : SqlMapperExtensionsBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Concurrent;\r\nusing System.Collections.Gen" +
                    "eric;\r\nusing System.Data;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing S" +
                    "ystem.Text;\r\nusing ");
            
            #line 10 "D:\Projects\Genie\Genie\Templates\Dapper\SqlMapperExtensions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BaseNamespace));
            
            #line default
            #line hidden
            this.Write(".Infrastructure.Models.Concrete;\r\nusing ");
            
            #line 11 "D:\Projects\Genie\Genie\Templates\Dapper\SqlMapperExtensions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BaseNamespace));
            
            #line default
            #line hidden
            this.Write(".Infrastructure.Filters.Abstract;\r\n\r\nnamespace ");
            
            #line 13 "D:\Projects\Genie\Genie\Templates\Dapper\SqlMapperExtensions.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenerationContext.BaseNamespace));
            
            #line default
            #line hidden
            this.Write(".Dapper\r\n{\r\n\tpublic static class SqlMapperExtensions\r\n    {\r\n        public inter" +
                    "face IProxy\r\n        {\r\n            bool IsDirty { get; set; }\r\n        }\r\n\r\n\r\n " +
                    "       public class SqlWhereOrderCache\r\n        {\r\n            public string Sql" +
                    " { get; set; }\r\n            public IEnumerable<string> Where { get; set; }\r\n    " +
                    "        public IEnumerable<string> Order { get; set; }\r\n        }\r\n\r\n        pri" +
                    "vate static readonly ConcurrentDictionary<RuntimeTypeHandle, IEnumerable<Propert" +
                    "yInfo>> KeyProperties = new ConcurrentDictionary<RuntimeTypeHandle, IEnumerable<" +
                    "PropertyInfo>>();\r\n        private static readonly ConcurrentDictionary<RuntimeT" +
                    "ypeHandle, IEnumerable<PropertyInfo>> TypeProperties = new ConcurrentDictionary<" +
                    "RuntimeTypeHandle, IEnumerable<PropertyInfo>>();\r\n        private static readonl" +
                    "y ConcurrentDictionary<RuntimeTypeHandle, string> TypeTableName = new Concurrent" +
                    "Dictionary<RuntimeTypeHandle, string>();\r\n\r\n        private static readonly Dict" +
                    "ionary<string, ISqlAdapter> AdapterDictionary = new Dictionary<string, ISqlAdapt" +
                    "er>() {\r\n                                                                       " +
                    "                 {\"sqlconnection\", new SqlServerAdapter()},\r\n                   " +
                    "                                                                     {\"npgsqlcon" +
                    "nection\", new PostgresAdapter()}\r\n                                              " +
                    "                                      };\r\n\r\n        private static IEnumerable<P" +
                    "ropertyInfo> KeyPropertiesCache(Type type)\r\n        {\r\n\r\n            IEnumerable" +
                    "<PropertyInfo> pi;\r\n            if (KeyProperties.TryGetValue(type.TypeHandle, o" +
                    "ut pi))\r\n            {\r\n                return pi;\r\n            }\r\n\r\n           " +
                    " var allProperties = TypePropertiesCache(type).ToList();\r\n            var keyPro" +
                    "perties = allProperties.Where(p => p.GetCustomAttributes(true).Any(a => a is Key" +
                    "Attribute)).ToList();\r\n\r\n            if (keyProperties.Count == 0)\r\n            " +
                    "{\r\n                var idProp = allProperties.FirstOrDefault(p => p.Name.ToLower" +
                    "() == \"id\");\r\n                if (idProp != null)\r\n                {\r\n          " +
                    "          keyProperties.Add(idProp);\r\n                }\r\n            }\r\n\r\n      " +
                    "      KeyProperties[type.TypeHandle] = keyProperties;\r\n            return keyPro" +
                    "perties;\r\n        }\r\n\r\n        private static IEnumerable<PropertyInfo> TypeProp" +
                    "ertiesCache(Type type)\r\n        {\r\n            IEnumerable<PropertyInfo> pis;\r\n " +
                    "           if (TypeProperties.TryGetValue(type.TypeHandle, out pis))\r\n          " +
                    "  {\r\n                return pis;\r\n            }\r\n\r\n            var properties = " +
                    "type.GetProperties().Where(IsWriteable).ToList();\r\n            TypeProperties[ty" +
                    "pe.TypeHandle] = properties;\r\n            return properties;\r\n        }\r\n\r\n     " +
                    "   public static bool IsWriteable(PropertyInfo pi)\r\n        {\r\n            var a" +
                    "ttributes = pi.GetCustomAttributes(typeof(WriteAttribute), false);\r\n            " +
                    "if (attributes.Length != 1)\r\n                return true;\r\n            var write" +
                    " = (WriteAttribute)attributes[0];\r\n            return write.Write;\r\n        }\r\n\r" +
                    "\n\t    /// <summary>\r\n\t    /// Return all  \r\n\t    /// </summary>\r\n\t    /// <typep" +
                    "aram name=\"T\">Interface type to create and populate</typeparam>\r\n\t    /// <param" +
                    " name=\"connection\">Open SqlConnection</param>\r\n\t    /// <param name=\"query\"></pa" +
                    "ram>\r\n\t    /// <returns>Entity of T</returns>\r\n\t    public static IEnumerable<T>" +
                    " Get<T>(this IDbConnection connection, IRepoQuery query)\r\n        {\r\n           " +
                    "return connection.Query<T>(GetRetriveQuery(query), transaction: query.Transactio" +
                    "n);\r\n        }\r\n\r\n\t    /// <summary>\r\n\t    /// Returns count of rows\r\n\t    /// <" +
                    "/summary>\r\n\t    /// <param name=\"connection\">Open SqlConnection</param>\r\n\t    //" +
                    "/ <param name=\"query\"></param>\r\n\t    /// <returns>Entity of T</returns>\r\n\t    pu" +
                    "blic static int Count(this IDbConnection connection, IRepoQuery query)\r\n        " +
                    "{\r\n\t        return connection.Query<int>(GetRetriveQuery(query, true), transacti" +
                    "on: query.Transaction).FirstOrDefault();\r\n        }\r\n\r\n\t    private static strin" +
                    "g GetRetriveQuery(IRepoQuery query, bool isCount = false)\r\n\t    {\r\n            v" +
                    "ar queryBuilder = new StringBuilder(string.Format(\"select {0} {1} from \" + query" +
                    ".Target, query.Limit != null ? \" top \" + query.Limit : \"\", isCount ? \"count(*)\" " +
                    ": \"*\"));\r\n            \r\n            if (query.Where != null && query.Where.Count" +
                    " > 0)\r\n            {\r\n                queryBuilder.Append(\" where \");\r\n\r\n       " +
                    "         var first = true;\r\n                var previous = \"\";\r\n\r\n              " +
                    "  while (query.Where.Count > 0)\r\n                {\r\n                    var curr" +
                    "ent = query.Where.Dequeue();\r\n\r\n                    if (AndOrOr(current))\r\n     " +
                    "               {\r\n                        if (first)\r\n                        {\r" +
                    "\n                            first = false;\r\n                            previou" +
                    "s = current;\r\n                            continue;\r\n                        }\r\n" +
                    "\r\n                        if (AndOrOr(previous))\r\n                        {\r\n   " +
                    "                         previous = current;\r\n                            contin" +
                    "ue;\r\n                        }\r\n\r\n                        previous = current;\r\n " +
                    "                       queryBuilder.Append(string.Format(\" {0} \", current));\r\n  " +
                    "                  }\r\n                    else\r\n                    {\r\n          " +
                    "              if (!first && !AndOrOr(previous))\r\n                        {\r\n    " +
                    "                        queryBuilder.Append(string.Format(\" {0} \", \"and\"));\r\n   " +
                    "                     }\r\n\r\n                        previous = current;\r\n         " +
                    "               queryBuilder.Append(string.Format(\" {0} \", current));\r\n          " +
                    "          }\r\n\r\n                    first = false;\r\n                }\r\n          " +
                    "  }\r\n\r\n            if (query.Order != null && query.Order.Count > 0)\r\n          " +
                    "  {\r\n                queryBuilder.Append(\" order by \");\r\n                while (" +
                    "query.Order.Count > 0)\r\n                {\r\n                    var item = query." +
                    "Order.Dequeue();\r\n                    queryBuilder.Append(string.Format(\" {0} \"," +
                    " item));\r\n                }\r\n            }\r\n\r\n            if (query.Page != null" +
                    " && query.PageSize != null)\r\n            {\r\n                queryBuilder.Append(" +
                    "string.Format(\" OFFSET ({0}) ROWS \" +\r\n                                         " +
                    "  \" FETCH NEXT {1} ROWS ONLY \", query.Page * query.PageSize, query.PageSize));\r\n" +
                    "            }\r\n            else\r\n            {\r\n                if (query.Skip !" +
                    "= null)\r\n                    queryBuilder.Append(string.Format(\" OFFSET ({0}) RO" +
                    "WS \", query.Skip));\r\n\r\n                if (query.Take != null)\r\n                " +
                    "    queryBuilder.Append(string.Format(\" FETCH NEXT {0} ROWS ONLY \", query.Take))" +
                    ";\r\n            }\r\n\r\n\t        return queryBuilder.ToString();\r\n\t    }\r\n\r\n        " +
                    "private static bool AndOrOr(string str)\r\n\t    {\r\n\t        return str == \"and\" ||" +
                    " str == \"or\";\r\n\t    }\r\n\r\n\r\n        private static string GetTableName(Type type)" +
                    "\r\n        {\r\n            string name;\r\n            if (TypeTableName.TryGetValue" +
                    "(type.TypeHandle, out name)) return name;\r\n            name = type.Name + \"s\";\r\n" +
                    "            if (type.IsInterface && name.StartsWith(\"I\"))\r\n                name " +
                    "= name.Substring(1);\r\n\r\n            var tableattr = type.GetCustomAttributes(fal" +
                    "se).SingleOrDefault(attr => attr.GetType().Name == \"TableAttribute\") as\r\n       " +
                    "         dynamic;\r\n            if (tableattr != null)\r\n                name = ta" +
                    "bleattr.Name;\r\n            TypeTableName[type.TypeHandle] = name;\r\n            r" +
                    "eturn name;\r\n        }\r\n\r\n\t    /// <summary>\r\n\t    /// Inserts an entity into ta" +
                    "ble \"Ts\" and returns identity id.\r\n\t    /// </summary>\r\n\t    /// <param name=\"co" +
                    "nnection\">Open SqlConnection</param>\r\n\t    /// <param name=\"entityToInsert\">Enti" +
                    "ty to insert</param>\r\n\t    /// <param name=\"transaction\"></param>\r\n\t    /// <par" +
                    "am name=\"commandTimeout\"></param>\r\n\t    /// <returns>Identity of inserted entity" +
                    "</returns>\r\n\t    public static long? Insert(this IDbConnection connection, BaseM" +
                    "odel entityToInsert, IDbTransaction transaction = null, int? commandTimeout = nu" +
                    "ll)\r\n        {\r\n\r\n            var type = entityToInsert.GetType();\r\n\r\n          " +
                    "  var name = GetTableName(type);\r\n\r\n            var sbColumnList = new StringBui" +
                    "lder(null);\r\n\r\n            var allProperties = TypePropertiesCache(type).ToList(" +
                    ");\r\n            var keyProperties = KeyPropertiesCache(type).ToList();\r\n        " +
                    "    var allPropertiesExceptKey = allProperties.Except(keyProperties).ToList();\r\n" +
                    "\r\n\t        var index = 0;\r\n\t        var lst = allProperties.Count == keyProperti" +
                    "es.Count ? keyProperties : allPropertiesExceptKey;\r\n            foreach (var pro" +
                    "perty in lst)\r\n\t        {\r\n                sbColumnList.AppendFormat(\"[{0}]\", pr" +
                    "operty.Name);\r\n                if (index < lst.Count() - 1)\r\n                   " +
                    " sbColumnList.Append(\", \");\r\n\t            index ++;\r\n\t        }\r\n\r\n\t        inde" +
                    "x = 0;\r\n            var sbParameterList = new StringBuilder(null);\r\n\r\n          " +
                    "  foreach (var property in lst)\r\n            {\r\n                sbParameterList." +
                    "AppendFormat(\"@{0}\", property.Name);\r\n                if (index < lst.Count() - " +
                    "1)\r\n                    sbParameterList.Append(\", \");\r\n                index++;\r" +
                    "\n            }\r\n            \r\n            var adapter = GetFormatter(connection)" +
                    ";\r\n\r\n            var id = adapter.Insert(connection, transaction, commandTimeout" +
                    ", name, sbColumnList.ToString(), sbParameterList.ToString(), keyProperties, enti" +
                    "tyToInsert);\r\n            return id;\r\n        }\r\n\r\n\t    /// <summary>\r\n\t    /// " +
                    "Updates entity in table \"Ts\", checks if the entity is modified if the entity is " +
                    "tracked by the Get() extension.\r\n\t    /// </summary>\r\n\t    /// <param name=\"conn" +
                    "ection\">Open SqlConnection</param>\r\n\t    /// <param name=\"entityToUpdate\">Entity" +
                    " to be updated</param>\r\n\t    /// <param name=\"transaction\"></param>\r\n\t    /// <p" +
                    "aram name=\"commandTimeout\"></param>\r\n\t    /// <returns>true if updated, false if" +
                    " not found or not modified (tracked entities)</returns>\r\n\t    public static bool" +
                    " Update(this IDbConnection connection, BaseModel entityToUpdate, IDbTransaction " +
                    "transaction = null, int? commandTimeout = null)\r\n        {\r\n            if (enti" +
                    "tyToUpdate.DatabaseModelStatus != ModelStatus.Retrieved)\r\n                return" +
                    " false;\r\n\r\n            if (entityToUpdate.UpdatedProperties == null || entityToU" +
                    "pdate.UpdatedProperties.Count < 1)\r\n                return false;\r\n\r\n           " +
                    " var type = entityToUpdate.GetType();\r\n\r\n            var keyProperties = KeyProp" +
                    "ertiesCache(type).ToList();\r\n            if (!keyProperties.Any())\r\n            " +
                    "    throw new ArgumentException(\"Entity must have at least one [Key] property\");" +
                    "\r\n\r\n            var name = GetTableName(type);\r\n\r\n            var sb = new Strin" +
                    "gBuilder();\r\n            sb.AppendFormat(\"update {0} set \", name);\r\n\r\n          " +
                    "  var allProperties = TypePropertiesCache(type);\r\n            var nonIdProps = a" +
                    "llProperties.Where(a => !keyProperties.Contains(a) && entityToUpdate.UpdatedProp" +
                    "erties.Contains(a.Name)).ToList(); // Only updated properties\r\n\r\n\r\n            f" +
                    "or (var i = 0; i < nonIdProps.Count(); i++)\r\n            {\r\n                var " +
                    "property = nonIdProps.ElementAt(i);\r\n                sb.AppendFormat(\"[{0}] = @{" +
                    "1}\", property.Name, property.Name);\r\n                if (i < nonIdProps.Count() " +
                    "- 1)\r\n                    sb.AppendFormat(\", \");\r\n            }\r\n\r\n            s" +
                    "b.Append(\" where \");\r\n            for (var i = 0; i < keyProperties.Count(); i++" +
                    ")\r\n            {\r\n                var property = keyProperties.ElementAt(i);\r\n  " +
                    "              sb.AppendFormat(\"[{0}] = @{1}\", property.Name, property.Name);\r\n  " +
                    "              if (i < keyProperties.Count() - 1)\r\n                    sb.AppendF" +
                    "ormat(\" and \");\r\n            }\r\n\r\n            var updated = connection.Execute(s" +
                    "b.ToString(), entityToUpdate, commandTimeout: commandTimeout, transaction: trans" +
                    "action);\r\n            return updated > 0;\r\n        }\r\n\r\n\t    /// <summary>\r\n\t   " +
                    " /// Delete entity in table \"Ts\".\r\n\t    /// </summary>\r\n\t    /// <param name=\"co" +
                    "nnection\">Open SqlConnection</param>\r\n\t    /// <param name=\"entity\"></param>\r\n\t " +
                    "   /// <param name=\"transaction\"></param>\r\n\t    /// <param name=\"commandTimeout\"" +
                    "></param>\r\n\t    /// <returns>true if deleted, false if not found</returns>\r\n\t   " +
                    " public static bool Delete(this IDbConnection connection, BaseModel entity, IDbT" +
                    "ransaction transaction = null, int? commandTimeout = null)\r\n        {\r\n\t        " +
                    "if (entity == null)\r\n\t        {\r\n                throw new ArgumentException(\"Th" +
                    "e entity is null, cannot delete a null entity\", \"entity\");\r\n            }\r\n\r\n   " +
                    "         var type = entity.GetType();\r\n            var keyProperties = KeyProper" +
                    "tiesCache(type).ToList();\r\n\r\n            if (!keyProperties.Any())\r\n            " +
                    "    throw new ArgumentException(\"Entity must have at least one [Key] property\");" +
                    "\r\n\r\n            var name = GetTableName(type);\r\n\r\n            var sb = new Strin" +
                    "gBuilder();\r\n            sb.AppendFormat(\"delete from {0} where \", name);\r\n\r\n   " +
                    "         for (var i = 0; i < keyProperties.Count(); i++)\r\n            {\r\n       " +
                    "         var property = keyProperties.ElementAt(i);\r\n                sb.AppendFo" +
                    "rmat(\"[{0}] = @{1}\", property.Name, property.Name);\r\n                if (i < key" +
                    "Properties.Count() - 1)\r\n                    sb.AppendFormat(\" and \");\r\n        " +
                    "    }\r\n            var deleted = connection.Execute(sb.ToString(), entity, trans" +
                    "action: transaction, commandTimeout: commandTimeout) > 0;\r\n            return de" +
                    "leted;\r\n        }\r\n\r\n        public static ISqlAdapter GetFormatter(IDbConnectio" +
                    "n connection)\r\n        {\r\n            var name = connection.GetType().Name.ToLow" +
                    "er();\r\n            return !AdapterDictionary.ContainsKey(name) ? new SqlServerAd" +
                    "apter() : AdapterDictionary[name];\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class SqlMapperExtensionsBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
