<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
using System;
using System.Collections.Generic;
using System.Linq;
using <#=GenerationContext.BaseNamespace#>.Dapper;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Interfaces;

namespace <#=GenerationContext.BaseNamespace#>.Infrastructure
{
	public class ProcedureContainer: IProcedureContainer
    {
		private IDapperContext Context { get; }

		internal ProcedureContainer(IDapperContext context)
		{
		    Context = context;
		}


<#foreach(var sp in _schema.Procedures){ #>
		public IEnumerable<T> <#=sp.Name#>_List<T>(<#=sp.ParamString#>) { return Context.Connection.Query<T>("EXEC <#=sp.Name#> <#=sp.PassString#>"); }
<#}#>

<#foreach(var sp in _schema.Procedures){ #>
		public T <#=sp.Name#>_Single<T>(<#=sp.ParamString#>) { return Context.Connection.QueryFirstOrDefault<T>("EXEC <#=sp.Name#> <#=sp.PassString#>"); }
<#}#>

<#foreach(var sp in _schema.Procedures){ #>
		public void <#=sp.Name#>_Void(<#=sp.ParamString#>) { Context.Connection.Execute("EXEC <#=sp.Name#> <#=sp.PassString#>"); }
<#}#>
    }
}
