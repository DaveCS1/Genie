<#@ template language="C#" #>
<#@ import namespace="Genie.Base.Generating.Concrete" #>
<#@ import namespace="System.Linq" #>
using System.Linq;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Interfaces;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Models.Abstract.Context;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Models.Concrete;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Models.Concrete.Context;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Repositories.Abstract;

namespace <#=GenerationContext.BaseNamespace#>.Infrastructure.Repositories
{

    namespace Abstract
    {
<#foreach(var relation in _relations){#>
	    public interface I<#=relation.Name#>Repository : IRepository<<#=relation.Name#>>
	    {
		    I<#=relation.Name#>QueryContext Get();
<#
        var keys= relation.Attributes.Where(a => a.IsKey).ToList();
#>
<#if(keys.Count > 0){
            var keyString = keys.Aggregate("", (c,n) => c + (", " + n.DataType  + " " + n.Name.ToLower())).TrimStart(',').TrimStart(' ');
#>
            <#=relation.Name#> GetByKey(<#=keyString#>);
<#}#>
	    }
<#}#>

<#foreach(var view in _views){#>
	    public interface I<#=view.Name#>Repository : IReadOnlyRepository<<#=view.Name#>>
	    {
		    I<#=view.Name#>QueryContext Get();
	    }
<#}#>

    }

    namespace Concrete
    {
<#foreach(var relation in _relations){#>
	    internal class <#=relation.Name#>Repository : Repository<<#=relation.Name#>> , I<#=relation.Name#>Repository
	    {
            internal <#=relation.Name#>Repository(IDapperContext context, IUnitOfWork unitOfWork) : base(context, unitOfWork)
            {
            }

		    public I<#=relation.Name#>QueryContext Get() { return new <#=relation.Name#>QueryContext(this); }

<#
        var keys= relation.Attributes.Where(a => a.IsKey).ToList();

#>
<#if(keys.Count > 0){
            var keyString = keys.Aggregate("", (c,n) => c + (", " + n.DataType + " " + n.Name.ToLower())).TrimStart(',').TrimStart(' ');
#>

            public <#=relation.Name#> GetByKey(<#=keyString#>)
            {
                return Get().Where
<#var str = keys.Aggregate("", (c,n) => c + (".And." + n.Name + ".EqualsTo(" + n.Name.ToLower() + ")")).TrimStart('.').TrimStart('A').TrimStart('n').TrimStart('d');#>
                    <#=str#>.Filter().Query().FirstOrDefault();
            }
<#}#>
	    }
<#}#>

<#foreach(var view in _views){#>
	    internal class <#=view.Name#>Repository : ReadOnlyRepository<<#=view.Name#>>, I<#=view.Name#>Repository
	    {
            internal <#=view.Name#>Repository(IDapperContext context) : base(context)
            {
            }

		    public I<#=view.Name#>QueryContext Get() { return new <#=view.Name#>QueryContext(this); }
	    }
<#}#>
    }
}