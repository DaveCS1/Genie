<#@ template language="C#" #>
<#@ import namespace="Genie.Base" #>
<#@ import namespace="Genie.Extensions"#>
<#@ import namespace="System.Linq"#>
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Models.Abstract;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Filters.Abstract;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Filters.Concrete;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Models.Abstract.Context;

namespace <#=GenerationContext.BaseNamespace#>.Infrastructure.Models.Concrete.Context
{
	public class <#=_name#>OrderContext : BaseOrderContext, I<#=_name#>OrderContext
    {
		private readonly I<#=_name#>QueryContext  _queryContext;
		internal <#=_name#>OrderContext(I<#=_name#>QueryContext context) { _queryContext = context; }

<#foreach(var atd in _attributes){#>
        private IOrderElement<I<#=_name#>OrderContext, I<#=_name#>QueryContext> <#=atd.FieldName#>;
	    public IOrderElement<I<#=_name#>OrderContext, I<#=_name#>QueryContext> <#=atd.Name#> { get { return <#=atd.FieldName#> ?? ( <#=atd.FieldName#> = new OrderElement<I<#=_name#>OrderContext, I<#=_name#>QueryContext>("<#=atd.Name#>", this, _queryContext)); } }
<#}#>
    }
}