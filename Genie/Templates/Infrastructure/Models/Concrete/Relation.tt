<#@ template language="C#" #>
<#@ import namespace="Genie.Base.Generating.Concrete" #>
<#@ import namespace="Genie.Extensions"#>
<#@ import namespace="System.Linq"#>
using System;
using System.Linq;
using System.Data;
using System.Collections.Generic;
using <#=GenerationContext.BaseNamespace#>.Dapper;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Collections.Concrete;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Collections.Abstract;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Actions.Abstract;
using <#=GenerationContext.BaseNamespace#>.Infrastructure.Actions.Concrete;

<#var entity = _relation;
var name = _relation.Name;
#>
namespace <#=GenerationContext.BaseNamespace#>.Infrastructure.Models.Concrete
{
<#if(_enum != null && _enum.Values.Count > 0){#>
	public sealed class <#=_enum.Name#>
	{
		private readonly <#=_enum.Type#> _value;
		private <#=_enum.Name#>(<#=_enum.Type#> value)
	    {
	        _value = value;
	    }

		public static implicit operator <#=_enum.Type#>(<#=_enum.Name#> @enum)
	    {
	        return @enum._value;
	    }

<#foreach(var key in _enum.Values){#>
		private static <#=_enum.Name#> <#=key.FieldName#>;
<#}#>

<#foreach(var key in _enum.Values){#>
		public static <#=_enum.Name#> <#=key.Name#> => <#=key.FieldName#> ?? ( <#=key.FieldName#> = new <#=_enum.Name#>(<#=key.Value#>));
<#}#>
	}

<#}#>
    [Table("[dbo].[<#=name#>]")]
    public class <#=name#> : BaseModel
    {
<#foreach(var atd in entity.Attributes){#>
		private <#=atd.DataType#> <#=atd.FieldName#>;
<#}#>

<#foreach(var atd in
entity.ForeignKeyAttributes){#>
		private <#=atd.ReferencingRelationName#> <#=atd.ReferencingNonForeignKeyAttribute.FieldName#>Obj;
<#}#>

<#foreach(var atd in entity.Attributes){#>
<#	if(atd.IsKey) {#>
		[Key]
<#	}#>
		public <#=atd.DataType#> <#=atd.Name#> { get { return <#=atd.FieldName#>; } set { if(<#=atd.FieldName#> == value ) { return; }  <#=atd.FieldName#> = value; __Updated("<#=atd.Name#>"); <#=atd.RefPropName != null ? atd.RefPropName + " = null;" : ""#> } }
<#}#>

<#foreach(var atd in entity.ForeignKeyAttributes){#>
		public <#=atd.ReferencingRelationName#> Get<#=atd.ReferencingNonForeignKeyAttribute.Name#>(IDbTransaction transaction =null)
        {
            return DatabaseUnitOfWork != null ? <#=atd.ReferencingNonForeignKeyAttribute.FieldName#>Obj ?? (<#=atd.ReferencingNonForeignKeyAttribute.FieldName#>Obj = DatabaseUnitOfWork.<#=atd.ReferencingRelationName#>Repository.Get().Where.<#=atd.ReferencingTableColumnName#>.EqualsTo(<#=atd.ReferencingNonForeignKeyAttribute.FieldName#><#=atd.ReferencingNonForeignKeyAttribute.DataType.EndsWith("?") ?  ".GetValueOrDefault()" : ""#>).Filter().Top(1).Query(transaction).FirstOrDefault()) : null;
        }
<#}#>

<#foreach(var atd in entity.ForeignKeyAttributes){#>
		public void Set<#=atd.ReferencingNonForeignKeyAttribute.Name#>(<#=atd.ReferencingRelationName#> entity)
        {
            if (entity == null)
                return;
            switch (entity.DatabaseModelStatus)
            {
                case ModelStatus.Retrieved:
                    <#=atd.ReferencingNonForeignKeyAttribute.Name#> = entity.<#=atd.ReferencingTableColumnName#>;
                    break;
                case ModelStatus.ToAdd:
                    if (entity.ActionsToRunWhenAdding == null)
                        entity.ActionsToRunWhenAdding = new List<IAddAction>();
                    entity.ActionsToRunWhenAdding.Add(new AddAction(i => { <#=atd.ReferencingNonForeignKeyAttribute.Name#> = ((<#=atd.ReferencingRelationName#>) i).<#=atd.ReferencingTableColumnName#>; }, entity));
                    break;
            }
        }
<#}#>

<#foreach(var list in entity.ReferenceLists){#>
		public IReferencedEntityCollection<<#=list.ReferncedRelationName#>> <#=list.ReferncedRelationName.ToPlural()#>WhereThisIs<#=list.ReferencedPropertyName#>(IDbTransaction transaction = null ){  return new ReferencedEntityCollection<<#=list.ReferncedRelationName#>>(DatabaseUnitOfWork.<#=list.ReferncedRelationName#>Repository.Get().Where.<#=list.ReferencedPropertyName#>.EqualsTo(<#=list.ReferencedPropertyOnThisRelation#>).Filter().Query(transaction), (i) => { ((<#=list.ReferncedRelationName#>)i).<#=list.ReferencedPropertyName#> = <#=list.ReferencedPropertyOnThisRelation#>;}, this); }
<#}#>
        internal override void SetId(object id)
        {
<#var keys = entity.Attributes.Where(e => e.IsKey);#>
<#foreach(var k in keys){#>
            <#=k.FieldName#> = (<#=k.DataType#>)id;
<#}#>
        }
    }
}
